name: 并行50删除 OneDrive 文件夹

on:
  schedule:
    - cron: '20 */1 * * *'  # 每 4 小时运行一次
  workflow_dispatch:  # 允许手动触发

jobs:
  delete-folder:
    runs-on: ubuntu-latest

    steps:
      - name: 检出仓库
        uses: actions/checkout@v3

      - name: 设置 Python 环境
        uses: actions/setup-python@v4
        with:
          python-version: '3.9'

      - name: 安装依赖
        run: |
          python -m pip install requests msal
          python -c "import requests; import msal; print('依赖安装成功')"

      - name: 删除 OneDrive 文件夹
        env:
          USER_ACCOUNTS: ${{ secrets.USER_ACCOUNTS }}  # 包含多个帐户信息的 JSON 字符串
        run: |
          python - <<EOF
          import os
          import requests
          from msal import ConfidentialClientApplication
          from time import sleep
          import json
          from concurrent.futures import ThreadPoolExecutor, as_completed

          user_accounts = json.loads(os.getenv("USER_ACCOUNTS"))

          def delete_folder(folder_path, access_token, user_email):
              url = f"https://graph.microsoft.com/v1.0/me/drive/root:/{folder_path}"
              headers = {
                  "Authorization": f"Bearer {access_token}"
              }

              max_retries = 3
              for attempt in range(max_retries):
                  try:
                      print(f"尝试删除文件夹 '{folder_path}' (第 {attempt + 1} 次) 用户 {user_email}")
                      response = requests.delete(url, headers=headers, timeout=10)
                      if response.status_code == 204:
                          print(f"用户 {user_email} 的文件夹 '{folder_path}' 删除成功！")
                          break
                      else:
                          print(f"删除失败，用户 {user_email}，状态码：{response.status_code}, 响应内容：{response.text}")
                  except requests.exceptions.RequestException as e:
                      print(f"请求失败，用户 {user_email}，错误信息：{e}")
                  sleep(5)  # 等待 5 秒后重试
              else:
                  print(f"多次尝试后仍未能删除用户 {user_email} 的文件夹 '{folder_path}'")

          def process_account(account):
              client_id = account['client_id']
              client_secret = account['client_secret']
              tenant_id = account['tenant_id']
              user_email = account['email']
              user_password = account['password']

              print(f"处理用户 {user_email}")

              # 初始化 MSAL 应用
              app = ConfidentialClientApplication(
                  client_id=client_id,
                  client_credential=client_secret,
                  authority=f"https://login.microsoftonline.com/{tenant_id}"
              )

              try:
                  # 获取访问令牌
                  result = app.acquire_token_by_username_password(
                      username=user_email,
                      password=user_password,
                      scopes=["https://graph.microsoft.com/.default"]
                  )

                  if "access_token" not in result:
                      print(f"获取访问令牌失败，用户 {user_email}，错误信息：{result.get('error_description')}")
                      return

                  access_token = result["access_token"]
                  print(f"用户 {user_email} 的访问令牌获取成功")

                  # 删除文件夹
                  delete_folder("htdocs", access_token, user_email)
                  delete_folder("wwww", access_token, user_email)
              except Exception as e:
                  print(f"处理用户 {user_email} 时出现错误：{e}")

          # 使用线程池并行处理多个帐户
          with ThreadPoolExecutor(max_workers=50) as executor:
              future_to_account = {executor.submit(process_account, account): account for account in user_accounts}
              for future in as_completed(future_to_account):
                  account = future_to_account[future]
                  try:
                      future.result()
                  except Exception as exc:
                      print(f"用户 {account['email']} 处理时出现异常：{exc}")
          EOF
